%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 592.000000 200.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.2 (Build 18C54) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 592 200
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 592 200
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: Baskerville
%!FontType1-1.0: Baskerville 1.0000.1.0000
14 dict begin/FontName /Baskerville def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /d put
dup 34 /quoteright put
dup 35 /A put
dup 36 /r put
dup 37 /t put
dup 38 /a put
dup 39 /g put
dup 40 /n put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1036 1 index div -705 2 index div 3616 3 index div 1968 5 -1 roll div]cvx def
/sfnts [<


00>] def
/CharStrings 10 dict dup begin
/.notdef 0 def
/A 1 def
/a 2 def
/d 3 def
/g 4 def
/n 5 def
/r 6 def
/t 7 def
/quoteright 8 def
/u10445_u1043B 9 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1036 -705 3616 1968}def
/UniqueID 4054374 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C91B4F1C51BADFF3495C2924BE71970B75EDF2A199B50F98194813A33F63946432A100A72F07034D96C090B98372E13F4DEE98CF5139167FB37139EFF3AF787539946CB241D82A1C224D6CDBD30776E970ACD3D8E8ADC8AE53D96F7CD2844CF50B8A77D5512FC8E54D140F27829698A718D80188DF7B04B0D3D443FDC3D465A2B3A3E4DA529AC5C7115C38E11BE0190AC6A228B6F4C7D13FAF035A3DB9A52AE9286B9DDE4D5B6F2507C2152168B2FCFC1A43A77A01A4F3419457E9C86A15A78C88FDDDF678F510BD8220431F636A6687B1E3ED2C7BB64D6BDBB99453715C5D79FE68DEACB3FA2D33248130F4171F56FE99D881B44809185DE87212817243A9213A9D7C28106F3A60FD929746B0BB86FE422D849B19F8D41608B3DE225C60AF4A7DF1DB8CA50B79A3764BABABCC62843A6EB81C26E8A3EDA6ED11644CD7BAD86AEED84603C07B448A5FE72AF5653F990E6DB9C91F0752AB1FA737CB5F25040D14A82A186AE1FD4EFF23A3F1E5FD2C6750E84DFC07DC9D59E9883BD60446629DD37E17A165404D1B90B5D362D6AAAEFB4CBD49E5AF7397EA872405A6B5723B2E49557A472A5E7229CDD5E20314F8F3594AB8B9BD15DCBDBD712631B4800053B75FDEFA42208F98EED36B44C8D61DE0D921C89F67313165A68781145E5DFED0C1D9F2E41828929E6EA5F00B96C4CBD77FBA31FB772D5490882D42A8EE0F05541917E50882453353C6EF4B85FA65F06320DC0C92C723086CBBBF5B35F3E9F85EFC05E7A
3DAC4148FCA36E11EC2B3914068FC85E65AC196319CAC30DC61C047529C95C30D0D68CFFE1775B718F002563FB67E78DF38D7C5CB8D334418EE4CF3D1725E0DBC307191DDED34A8689459982FF008CF22E0796AB911DA77B0CD9619301E98DAA42C56CD828F44535C2F73E87A2CAACC0217F8411C86F8F6B116B3DF41AC0B48F6BCB01109ABF411CFAC4D29082A7938735ABF274BF6415384F025F1FBE10D5CB701487F6371EB18B01A29AED9B94974B77267AF5172C6C8FA991BD3F4547F8501B6E665D35479610667D4A1EA0F9E332FE83661B0A2575019B752FE236CDEDC5D5E5B258E23685E853C1C11D57F128A1078180FEF4E35BA38874507BF188500D61E16082F81C7FBAC066BB14802D8405DE57364F94C88E9277893E969E90BF587A78A304312DF78BE27836D381307B43AA3BDBA8EC851E738A7827175EE550A8D8E66636BF79A29BEBD36923D61B340DF666B4B3E7FEE92EC496EC83BEDE41E41AA8D0EBD7A12C003F3A67866935B006EB102948746B6E831FF1F8FEA7ADAD929ABE098119870F614D1DCDEFDAB7FCDC9D5042EAF03E03F89B6394512621ADB0D4ACD3758A766D465639424C17152694232FE5A6B2B1746D801A237D2068C4EC790A4C48E6DDD1AE69B6E3E55B509599CDCD5548138789231560A2F08B754AFF3DD557C0003B538D7C4EE844B88D27893E3C50F2AD623BA9035FBD5686271EFC15FE10CE04F79ABE0618A9543CEB6C593BA11EFD540EDE5D427AB86A804746601B68B253F768BA877F96DD675B9805DBBB21EA874BD40A36F98E0057B2E8122BDC5B35C86F7BF64AB5C31523DB012EC505FEB258D590EEE509E5B10EA3A0A2C4418015EC45B67C685832649D4EEDF6E84134CE57FA8276788A0404B8FADEEB7DB186AAC4798818E69925CA223C8F600FF43E9EA331FB42BDF1A6616FD287029BBF8E3187BBFDEB5DEE645F71D984201DD8AA41EF5DD6A3FA7123B40C1E49391B4B6EA49B282E01A912A3159262CD7EE00A22A565E9D3E9B75028F33C941359ECE7E5748AC2CBA17E9931BD14B44A8A91104F18A4C1050F0876CD32A70383AA886C99290BE87380D39FD97612B9642F046D90AC95A01913E15386BF62E94BBF37CD2D5A891ABBAB118DF4792644C20C1B9E0D735E3EF4486F66442E98C4482743F47094AE59A618010CBA3BCDD970DEAFE6C237ACFC132F528E78264AF085ECE63E67359050A151768968C36308E5D62FBE26E05A7B2E390335FBA536564EC4CB26F622460C1982CEE6BF341E347917E56515BC32086E790FAD1C76928E815308CA025C59CC3973E90D47277214B21D689F477D6E9591FA9193BAB9A9FFC24A1770F7C6BAC3935CF6FF9DB4AF68F756D2ACEE4B5743CA594C5CAB911CCAB46A46A63E6DC2C3FBA57B5B3825DBE1D7AF9B2E82A797DBADCC67DBC2B4DA4B55BB1C

A7B0D870248AEB6BEBB36490B555269FE26A3A9983DF874342AAA37BA3D6CF6723FFA81BE89451A89417C19A14B0AA92E9EA8AE17AF83E8BD6C048B3F8B8EF6214CE319CD48B1F403F19E635236F02977818821216D1023449A77FC3756190298E732FB9F87754252A0DF988600323CA4CB5C6108F15AD3609EEFC35644BA7195637A3890EE5E1AA7741892718C71CB687DD9B2BBD8AC86F3A7B30FCE33FE83CC8D6D82C42EF52D34305E1229964FB31D9FC0C8D44044BCC2813E46A4322E0E9CA8FA3DCE5866D9E01D34C5619DABD354758B78DBD1E8AE998D970C1E25A0C877E5D2658E7D831B591D62479A15E07C2C3357E476CB94FD52035E0B70324DDCF01D324958692049EC94672E52ED4C572A554772B7A6BD4A93DCE7E7616F5C672E94F195B420992EB6A32D15B7D073A188E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/Baskerville cguidfix
/F1.1/Baskerville renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
0 0 0 sc
q
0 0 592 200 rc
44.233818 130.23096 m
32.71891 148.75642 20.144077 165.34071 10.993128 184.58252 c
16.275543 179.42479 20.103237 173.95303 24.67387 168.20139 c
33.34449 156.3429 42.232746 142.76874 50.75956 130.53479 c
61.301941 115.82686 70.75576 101.0607 81.347847 86.386208 c
89.648109 75.091217 107.54462 49.979038 111.90969 43.093769 c
116.52732 35.847481 123.68065 24.901257 127.95759 17.490475 c
130.88399 11.936301 129.40291 6.565752 127.96214 4.4786291 c
121.09684 11.412839 113.63724 26.461226 104.99432 37.980824 c
103.84579 39.528118 61.744286 102.6578 44.233818 130.23096 c
h
44.233818 130.23096 m
f
96.031921 59.361084 m
102.49255 61.191071 109.43062 62.018318 115.59105 58.969723 c
119.53163 57.171848 122.46789 52.495708 121.02927 48.190964 c
119.48128 43.520382 114.37069 41.360645 110.69 38.762405 c
110.78027 38.645866 96.407341 59.538551 96.031921 59.361084 c
h
96.031921 59.361084 m
f
95.749588 59.371094 m
91.489922 54.042953 87.981621 47.872936 88.408646 40.903744 c
88.53817 36.505501 91.75898 31.913557 96.356651 31.563965 c
101.34006 31.17219 105.37602 35.106277 109.25966 37.528282 c
109.33274 37.398624 95.436058 59.0895 95.749588 59.371094 c
h
95.749588 59.371094 m
f
1 1 1 sc
96.035088 37.621666 m
98.276505 35.817177 102.26799 37.010262 105.36764 38.440987 c
108.34939 39.817879 112.10628 42.841366 115.7008 46.764587 c
117.74763 49.880161 117.1455 51.990227 114.83987 53.510246 c
110.15446 56.59914 104.75451 57.83654 101.11463 56.248333 c
98.950409 55.303749 98.893829 54.999454 96.938103 53.03561 c
94.707863 50.796307 90.621231 41.981682 96.035088 37.621666 c
h
96.035088 37.621666 m
f
2 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -948 227 cm
1044.035 189.37834 m
1046.2765 191.18283 1050.2679 189.98973 1053.3677 188.55902 c
1056.3494 187.18213 1060.1063 184.15863 1063.7008 180.23541 c
1065.7477 177.11984 1065.1455 175.00978 1062.8398 173.48976 c
1058.1544 170.40086 1052.7545 169.16345 1049.1146 170.75166 c
1046.9504 171.69624 1046.8938 172.00055 1044.9381 173.96439 c
1042.7079 176.20369 1038.6212 185.01833 1044.035 189.37834 c
h
1044.035 189.37834 m
S
0 i
1 1 1 sc
CM
128.24127 12.863293 m
128.3165 11.103865 128.09537 9.8478794 127.23757 8.2281742 c
126.04633 5.9804258 124.56829 11.759748 124.68323 13.795077 c
124.79723 15.830621 125.89726 19.446991 126.92389 17.684692 c
128.03723 15.773479 128.22385 13.265727 128.24127 12.863293 c
h
128.24127 12.863293 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -948 227 cm
1076.2413 214.1367 m
1076.3165 215.89613 1076.0953 217.15211 1075.2375 218.77182 c
1074.0464 221.01958 1072.5682 215.24025 1072.6832 213.20493 c
1072.7972 211.16937 1073.8972 207.55301 1074.924 209.31531 c
1076.0372 211.22652 1076.2239 213.73427 1076.2413 214.1367 c
h
1076.2413 214.1367 m
S
0 i
1 1 1 sc
CM
123.0169 20.924417 m
123.0919 19.164061 122.87077 17.908075 122.0132 16.289297 c
120.8223 14.040979 119.34427 19.820301 119.45885 21.856201 c
119.57322 23.891174 120.67324 27.507545 121.69952 25.745815 c
122.81321 23.834032 122.99947 21.326851 123.0169 20.924417 c
h
123.0169 20.924417 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -948 227 cm
1071.0168 206.07558 m
1071.0919 207.83594 1070.8707 209.09192 1070.0132 210.71071 c
1068.8223 212.95901 1067.3442 207.1797 1067.4589 205.1438 c
1067.5732 203.10883 1068.6732 199.49246 1069.6995 201.25418 c
1070.8132 203.16597 1070.9995 205.67314 1071.0168 206.07558 c
h
1071.0168 206.07558 m
S
0 i
1 1 1 sc
CM
118.58778 27.663351 m
118.66278 25.902994 118.44166 24.647009 117.58386 23.027304 c
116.39319 20.779913 114.91515 26.559235 115.02951 28.594208 c
115.1441 30.630108 116.24355 34.24612 117.26982 32.484394 c
118.38409 30.572966 118.5707 28.065214 118.58778 27.663351 c
h
118.58778 27.663351 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -948 227 cm
1066.5878 199.33665 m
1066.6627 201.097 1066.4417 202.353 1065.5839 203.9727 c
1064.3932 206.22009 1062.9152 200.44077 1063.0295 198.40579 c
1063.144 196.36989 1064.2435 192.75388 1065.2698 194.51561 c
1066.384 196.42703 1066.5707 198.93478 1066.5878 199.33665 c
h
1066.5878 199.33665 m
S
0 i
1 1 1 sc
CM
127.65735 13.622571 m
127.73256 11.863143 127.51144 10.607158 126.65365 8.9874525 c
125.46297 6.7400603 123.98471 12.518456 124.0993 14.554356 c
124.21387 16.590256 125.31333 20.20627 126.33996 18.44397 c
127.4533 16.532757 127.64048 14.025362 127.65735 13.622571 c
h
127.65735 13.622571 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -948 227 cm
1075.6573 213.37743 m
1075.7325 215.13686 1075.5115 216.39284 1074.6537 218.01254 c
1073.463 220.25993 1071.9847 214.48155 1072.0992 212.44565 c
1072.2139 210.40974 1073.3134 206.79373 1074.34 208.55603 c
1075.4532 210.46724 1075.6405 212.97464 1075.6573 213.37743 c
h
1075.6573 213.37743 m
S
0 i
CM
176.37489 139.6837 m
186.66096 158.91862 194.73596 178.10089 206.82439 195.64676 c
204.99886 188.49318 202.17403 182.44243 199.47827 175.60832 c
193.54382 162.17009 186.23239 147.68556 179.90089 134.18416 c
172.43463 117.70022 164.37367 102.12989 156.96124 85.619629 c
151.32962 72.783897 138.53009 44.72897 134.7498 37.506081 c
130.78316 29.883949 124.88011 18.215872 120.60065 10.80654 c
117.2538 5.4951143 111.86223 4.092495 109.33434 4.2966738 c
111.90689 13.709309 121.20937 27.693705 126.86419 40.938484 c
127.62991 42.706787 161.25107 110.7326 176.37489 139.6837 c
h
176.37489 139.6837 m
f
140.89883 59.390282 m
145.71396 54.710205 149.89941 49.115292 150.33946 42.255901 c
150.75275 37.944324 148.17122 33.063381 143.72389 32.156891 c
138.90506 31.162193 134.47939 34.508228 130.38889 36.396675 c
130.3331 36.260227 141.24023 59.153893 140.89883 59.390282 c
h
140.89883 59.390282 m
f
140.76634 59.639801 m
134.0222 60.664711 126.92465 60.617973 121.10267 56.763565 c
117.35844 54.452274 114.9921 49.366997 116.98818 45.210503 c
119.1406 40.698856 124.56561 39.170654 128.60493 37.01833 c
128.52919 36.890205 140.36571 59.770527 140.76634 59.639801 c
h
140.76634 59.639801 m
f
1 1 1 sc
122.07352 48.517834 m
121.6315 45.674465 124.66049 42.814278 127.44936 40.845272 c
130.13264 38.951443 134.62952 37.209621 139.82439 36.058289 c
143.54597 35.843468 145.07227 37.41996 145.23584 40.176701 c
145.56819 45.778835 143.93983 51.074036 140.74446 53.432152 c
138.84431 54.834133 138.55251 54.730988 135.8739 55.442772 c
132.81949 56.254566 123.14249 55.386375 122.07352 48.517834 c
h
122.07352 48.517834 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -948 227 cm
1070.0735 178.48216 m
1069.6315 181.32553 1072.6605 184.18571 1075.4493 186.15472 c
1078.1327 188.04855 1082.6295 189.79037 1087.8243 190.94171 c
1091.546 191.15652 1093.0723 189.58003 1093.2358 186.8233 c
1093.5682 181.22116 1091.9398 175.92596 1088.7445 173.56786 c
1086.8444 172.16586 1086.5525 172.26901 1083.8739 171.55724 c
1080.8195 170.74544 1071.1425 171.61362 1070.0735 178.48216 c
h
1070.0735 178.48216 m
S
0 i
1 1 1 sc
CM
116.73524 8.2472706 m
115.24914 7.3024182 114.05086 6.8659248 112.21926 6.7989411 c
109.67702 6.7067189 113.94305 10.876399 115.76317 11.794524 c
117.583 12.71356 121.26488 13.569098 120.25201 11.798858 c
119.15351 9.8790712 117.07504 8.4635868 116.73524 8.2472706 c
h
116.73524 8.2472706 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -948 227 cm
1064.7352 218.75273 m
1063.2491 219.69759 1062.0509 220.13408 1060.2192 220.20107 c
1057.677 220.29327 1061.943 216.1236 1063.7632 215.20547 c
1065.583 214.28644 1069.2649 213.43091 1068.252 215.20114 c
1067.1536 217.12093 1065.0751 218.53641 1064.7352 218.75273 c
h
1064.7352 218.75273 m
S
0 i
1 1 1 sc
CM
121.10419 16.802277 m
119.61718 15.857145 118.4189 15.420651 116.58821 15.353946 c
114.04566 15.261129 118.31168 19.430809 120.13212 20.349529 c
121.95164 21.267971 125.63351 22.123508 124.62096 20.353863 c
123.52215 18.433483 121.44399 17.018591 121.10419 16.802277 c
h
121.10419 16.802277 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -948 227 cm
1069.1042 210.19772 m
1067.6172 211.14285 1066.4189 211.57935 1064.5883 211.64606 c
1062.0457 211.73888 1066.3116 207.56918 1068.1321 206.65047 c
1069.9517 205.73203 1073.6335 204.8765 1072.621 206.64613 c
1071.5221 208.56651 1069.444 209.98141 1069.1042 210.19772 c
h
1069.1042 210.19772 m
S
0 i
1 1 1 sc
CM
124.72572 24.007473 m
123.23871 23.062344 122.04043 22.625849 120.20882 22.558865 c
117.66719 22.466328 121.93321 26.636007 123.75273 27.554449 c
125.57317 28.473169 129.25446 29.329021 128.24188 27.559376 c
127.14368 25.63868 125.0652 24.223196 124.72572 24.007473 c
h
124.72572 24.007473 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -948 227 cm
1072.7257 202.99252 m
1071.2386 203.93765 1070.0404 204.37415 1068.2089 204.44113 c
1065.6672 204.53368 1069.9332 200.364 1071.7527 199.44556 c
1073.5731 198.52682 1077.2544 197.67097 1076.2419 199.44063 c
1075.1437 201.36131 1073.0652 202.77681 1072.7257 202.99252 c
h
1072.7257 202.99252 m
S
0 i
1 1 1 sc
CM
117.10083 9.1326084 m
115.61473 8.1877556 114.41645 7.7512627 112.58485 7.6842785 c
110.04321 7.5917401 114.30832 11.761142 116.12875 12.679862 c
117.94919 13.598582 121.63047 14.454435 120.61759 12.684196 c
119.5191 10.764409 117.44122 9.348608 117.10083 9.1326084 c
h
117.10083 9.1326084 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -948 227 cm
1065.1008 217.86739 m
1063.6147 218.81224 1062.4165 219.24873 1060.5848 219.31572 c
1058.0432 219.40826 1062.3083 215.23886 1064.1288 214.32014 c
1065.9492 213.40141 1069.6305 212.54556 1068.6176 214.31581 c
1067.519 216.2356 1065.4413 217.6514 1065.1008 217.86739 c
h
1065.1008 217.86739 m
S
0 i
CM
156.31311 180.39369 m
178.11409 181.10316 198.76392 183.70116 220.0033 182.0052 c
212.89536 180.00935 206.24283 179.43036 198.97644 178.3479 c
184.37137 176.76817 168.17169 175.85779 153.31337 174.59032 c
135.30473 172.81432 117.78996 172.01015 99.785431 170.17438 c
85.853546 168.63364 55.157509 165.69089 47.012157 165.35327 c
38.427872 164.97743 25.371498 164.25557 16.815104 164.25702 c
10.541846 164.49977 6.6313553 168.4677 5.5442371 170.759 c
14.982093 173.23743 31.744177 172.17345 46.041897 173.89862 c
47.956158 174.11963 123.67882 179.01578 156.31311 180.39369 c
h
156.31311 180.39369 m
f
69.038948 170.97015 m
67.393448 164.4601 64.640831 158.03793 58.920452 154.22714 c
55.393162 151.71344 49.875378 151.50864 46.866669 154.90689 c
43.595818 158.58278 44.280727 164.08855 43.870926 168.57523 c
43.724865 168.55531 69.004929 170.5563 69.038948 170.97015 c
h
69.038948 170.97015 m
f
69.188782 171.20967 m
66.704315 177.56271 63.11507 183.686 56.866062 186.80078 c
52.99231 188.88774 47.405163 188.39439 44.803574 184.58749 c
41.97258 180.46762 43.361622 175.00534 43.517319 170.431 c
43.368488 170.43254 69.101685 171.62198 69.188782 171.20967 c
h
69.188782 171.20967 m
f
1 1 1 sc
50.210476 181.83713 m
47.527035 180.79825 46.564533 176.74498 46.253754 173.34525 c
45.955299 170.07452 46.695274 165.30922 48.29562 160.23466 c
49.970375 156.90427 52.098808 156.3707 54.567997 157.60742 c
59.585766 160.12065 63.357365 164.17845 63.801872 168.12477 c
64.065948 170.47134 63.830711 170.6725 63.107838 173.34811 c
62.283661 176.39922 56.693287 184.34566 50.210476 181.83713 c
h
50.210476 181.83713 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -948 227 cm
998.21045 45.162872 m
995.52704 46.201748 994.56451 50.255024 994.25378 53.654755 c
993.95532 56.925476 994.69525 61.690784 996.29559 66.765343 c
997.9704 70.095734 1000.0988 70.629303 1002.568 69.392586 c
1007.5858 66.879341 1011.3574 62.821548 1011.8019 58.875221 c
1012.066 56.528656 1011.8307 56.327507 1011.1078 53.651882 c
1010.2837 50.60078 1004.6933 42.654346 998.21045 45.162872 c
h
998.21045 45.162872 m
S
0 i
1 1 1 sc
CM
12.666003 166.32494 m
11.104686 167.13951 10.127533 167.959 9.1537228 169.51173 c
7.8027396 171.66725 13.546799 170.05762 15.251977 168.9404 c
16.957804 167.8239 19.539661 165.06306 17.500149 165.05513 c
15.288321 165.04655 13.023239 166.13882 12.666003 166.32494 c
h
12.666003 166.32494 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -948 227 cm
960.66602 60.675064 m
959.10468 59.860485 958.12756 59.040997 957.15375 57.488274 c
955.80273 55.332748 961.54681 56.94239 963.25195 58.059593 c
964.95782 59.176102 967.53967 61.936935 965.50012 61.944874 c
963.28833 61.953445 961.02325 60.861179 960.66602 60.675064 c
h
960.66602 60.675064 m
S
0 i
1 1 1 sc
CM
22.259329 166.81882 m
20.697317 167.63405 19.720163 168.45354 18.747049 170.00562 c
17.395393 172.16112 23.139452 170.55147 24.845304 169.43428 c
26.550459 168.31775 29.132315 165.55693 27.093475 165.54901 c
24.880974 165.54041 22.616566 166.63271 22.259329 166.81882 c
h
22.259329 166.81882 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -948 227 cm
970.25934 60.181183 m
968.69733 59.365955 967.72015 58.546463 966.74707 56.994392 c
965.39539 54.83889 971.13947 56.448532 972.84528 57.565712 c
974.55048 58.682243 977.13232 61.443077 975.09351 61.450993 c
972.88098 61.459591 970.61658 60.367302 970.25934 60.181183 c
h
970.25934 60.181183 m
S
0 i
1 1 1 sc
CM
30.309978 167.28508 m
28.747965 168.10031 27.770811 168.9198 26.797001 170.47252 c
25.446041 172.62738 31.190102 171.01773 32.895256 169.9012 c
34.601105 168.78403 37.182941 166.02386 35.1441 166.01595 c
32.931622 166.00667 30.66654 167.09894 30.309978 167.28508 c
h
30.309978 167.28508 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -948 227 cm
978.31 59.714916 m
976.74799 58.899693 975.77081 58.0802 974.797 56.527481 c
973.44604 54.372627 979.19012 55.982269 980.89526 57.098801 c
982.60114 58.215981 985.18292 60.976139 983.1441 60.984058 c
980.93164 60.993324 978.66656 59.901058 978.31 59.714916 c
h
978.31 59.714916 m
S
0 i
1 1 1 sc
CM
13.615522 166.451 m
12.054206 167.26558 11.077052 168.08507 10.103242 169.63779 c
8.7522831 171.79263 14.495646 170.18364 16.201496 169.06647 c
17.907347 167.94928 20.489182 165.18913 18.449669 165.18118 c
16.237839 165.17261 13.972781 166.26421 13.615522 166.451 c
h
13.615522 166.451 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -948 227 cm
961.61554 60.549004 m
960.0542 59.734428 959.07703 58.914936 958.10327 57.362213 c
956.75226 55.207359 962.49567 56.816353 964.20148 57.933533 c
965.90735 59.050713 968.4892 61.810875 966.44965 61.818817 c
964.23785 61.827389 961.97278 60.735794 961.61554 60.549004 c
h
961.61554 60.549004 m
S
0 0.21569 0.46274999 sc
0 i
1 0 0 -1 335 124.02469 cm
/F1.1[ 110 0 0 -110 0 0]sf
-251.52832 36 m
(!")[ 57.309570 0.000000 ] xS
/Cs2 SC
0 sc
-166.71875 36 m
(#$%&'\(&\()[ 74.497070 40.122070 32.065430 51.562500 51.562500 58.437500 51.562500 0.000000 ] xS
ep
end
%%Trailer
%%EOF
